path /rumours-test/{rumour_id} is Rumour {
  read() { isSignedIn() }
  create() { isSignedIn() }
  update() { isCurrentUser(prior(this).uid) }
}

path /user-rumours-test/{uid} {
  read() { isCurrentUser(uid) }
  create() { isCurrentUser(uid) }
  update() { isCurrentUser(uid) }
}

path /tags-test/{tag} is Map<String, Boolean> {
  read() { isSignedIn()  }
  write() { isSignedIn()  }
}

type Rumour {
  rumourName: ShortString | Null,
  placeHeard: Number,
  region: Number,
  township: Number | Null,
  uid: String,
  description: LongString,
  rumourTags: ShortString[] | Null,
  rumourDate: Number,
  hidden: Boolean,
  timestamp: CurrentTimestamp
}

//
// Helper Types
//
type CurrentTimestamp extends Number {
  validate() { this == now }
}

type LongString extends String {
  validate() { this.length > 0 && this.length < 1000 }
}

type ShortString extends String {
  validate() { this.length > 0 && this.length < 100 }
}

//
// Helper Functions
//
isCurrentUser(uid) { isSignedIn() && auth.uid == uid }
isSignedIn() { auth != null }
createOnly(value) { prior(value) == null && value != null }